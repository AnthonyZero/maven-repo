<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.anthonyzero</groupId>
	<artifactId>api-vc-spring-boot-starter</artifactId>
	<version>1.0.0</version>

<!--	<properties>-->
<!--		&lt;!&ndash; 此处配置的名称要和maven配置文件对应的serverId一致 &ndash;&gt;-->
<!--		<github.global.server>github</github.global.server>-->
<!--	</properties>-->

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>2.1.0.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.16.18</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>


	<build>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.0.2</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>8</source>
					<target>8</target>
				</configuration>
			</plugin>

			<!--源码-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.0.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--打包插件到本地-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.8.1</version>
				<configuration>
					<altDeploymentRepository>internal.repo::default::file://${project.build.directory}/repository</altDeploymentRepository>
				</configuration>
			</plugin>


<!--			&lt;!&ndash;github上传插件,用于修改后的发布,执行 mvn clean deploy 自动打包上传到github&ndash;&gt;-->
<!--			<plugin>-->
<!--				<groupId>com.github.github</groupId>-->
<!--				<artifactId>site-maven-plugin</artifactId>-->
<!--				<version >0.12</version>-->
<!--				<configuration>-->
<!--					<message >Creating site for ${project.artifactId}-${project.version}</message>-->
<!--					<noJekyll>true</noJekyll>-->
<!--					&lt;!&ndash;指定从哪里去取打好的包，并上传至github, 对应上面的altDeploymentRepository&ndash;&gt;-->
<!--					<outputDirectory>${project.build.directory}/repository</outputDirectory>-->
<!--					&lt;!&ndash;-->
<!--						指定要上传的分支, refs/heads 这个不变，后面的分支名可选，可以采取一个jar包使用一个分支的策略。-->
<!--						若多个jar包同时发布在同一个分支的话，会覆盖。。。。-->
<!--					&ndash;&gt;-->
<!--					<branch>refs/heads/master</branch>-->
<!--&lt;!&ndash;					<merge>true</merge>&ndash;&gt;-->
<!--					&lt;!&ndash; 包含outputDirectory标签内填的文件夹中的所有内容 &ndash;&gt;-->
<!--					<includes>-->
<!--						<include>**/*</include>-->
<!--					</includes>-->
<!--					&lt;!&ndash;对应github上创建的仓库名称 github远程存储outputDirectory标签内填的文件夹中的内容&ndash;&gt;-->
<!--					<repositoryName>maven-repo</repositoryName>-->
<!--					&lt;!&ndash;github的用户名，注意不是登录的用户名&ndash;&gt;-->
<!--					<repositoryOwner>pingjin</repositoryOwner>-->
<!--					<server>github</server>-->
<!--				</configuration>-->

<!--				<executions>-->
<!--					<execution>-->
<!--						<goals>-->
<!--							<goal>site</goal>-->
<!--						</goals>-->
<!--						<phase>deploy</phase>-->
<!--					</execution>-->
<!--				</executions>-->
<!--			</plugin>-->

		</plugins>
	</build>

</project>
